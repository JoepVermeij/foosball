import { Gaussian } from './mathematics';
import { Rating } from './rating';
export declare class Variable extends Gaussian {
    messages: {
        [key: string]: Gaussian;
    };
    constructor();
    setVal(val: Variable | Gaussian): number;
    delta(other: Variable | Gaussian): number;
    updateMessage(factor: LikelihoodFactor | SumFactor | PriorFactor, pi?: number, tau?: number, message?: Gaussian): number;
    updateValue(factor: TruncateFactor | PriorFactor, pi?: number, tau?: number, value?: Gaussian): number;
    toString(): string;
}
export declare class Factor {
    vars: Variable[];
    private uuid;
    constructor(vars: Variable[]);
    down(): number;
    up(): number;
    readonly v: Variable;
    toString(): string;
}
export declare class PriorFactor extends Factor {
    private val;
    private dynamic;
    constructor(v: Variable, val: Rating, dynamic?: number);
    down(): number;
}
export declare class LikelihoodFactor extends Factor {
    private mean;
    private value;
    private variance;
    constructor(mean: Variable, value: Variable, variance: number);
    calc_a(v: Gaussian): number;
    down(): number;
    up(): number;
}
export declare class SumFactor extends Factor {
    private sum;
    private terms;
    private coeffs;
    constructor(sum: Variable, terms: Variable[], coeffs: number[]);
    down(): number;
    up(index?: number): number;
    update(v: Variable, vals: Variable[], msgs: Gaussian[], coeffs: number[]): number;
}
export declare class TruncateFactor extends Factor {
    private vFunc;
    private wFunc;
    private drawMargin;
    constructor(v: Variable, vFunc: (a: number, b: number) => number, wFunc: (a: number, b: number) => number, drawMargin: number);
    up(): number;
}
