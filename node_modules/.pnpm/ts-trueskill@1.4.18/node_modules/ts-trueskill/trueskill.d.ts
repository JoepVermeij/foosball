import { Rating } from './rating';
/** stores set global environment */
export declare let trueskill: TrueSkill;
/**
 * Calculates a draw-margin from the given drawProbability
 */
export declare function calcDrawMargin(drawProbability: number, size: number, env?: TrueSkill): number;
/**
 * Implements a TrueSkill environment.  An environment could have
 * customized constants.  Every games have not same design and may need to
 * customize TrueSkill constants.
 *
 * For example, 60% of matches in your game have finished as draw then you
 * should set ``draw_probability`` to 0.60::
 *
 * const env = new TrueSkill(draw_probability=0.60)
 *
 * For more details of the constants, see `The Math Behind TrueSkill`_ by
 * Jeff Moser.
 *
 */
export declare class TrueSkill {
    mu: number;
    sigma: number;
    beta: number;
    tau: number;
    drawProbability: number;
    backend: any;
    constructor(mu?: number | null, sigma?: number | null, beta?: number | null, tau?: number | null, drawProbability?: number | null);
    /** Recalculates ratings by the ranking table */
    rate(ratingGroups: Rating[][] | any[], ranks?: number[] | null, weights?: number[][] | null, minDelta?: number): Rating[][] | any[];
    /**
     * Calculates the match quality of the given rating groups. Result
     * is the draw probability in the association::
     *
     *   env = TrueSkill()
     *   if env.quality([team1, team2, team3]) < 0.50 {
     *     console.log('This match seems to be not so fair')
     *   }
     */
    quality(ratingGroups: Rating[][], weights?: number[][]): number;
    /**
     * Initializes new `Rating` object, but it fixes default mu and
     * sigma to the environment's.
     * var env = TrueSkill(mu=0, sigma=1)
     * var env.createRating()
     * trueskill.Rating(mu=0.000, sigma=1.000)
     */
    createRating(mu?: number, sigma?: number): Rating;
    /**
     * Returns the value of the rating exposure.  It starts from 0 and
     * converges to the mean.  Use this as a sort key in a leaderboard
     */
    expose(rating: Rating): number;
    /**
     * Registers the environment as the global environment.
     */
    make_as_global(): TrueSkill;
    /**
     * Taken from https://github.com/sublee/trueskill/issues/1
     */
    winProbability(a: Rating[], b: Rating[]): number;
    /**
     * The non-draw version of "V" function.
     * "V" calculates a variation of a mean.
     */
    private v_win(diff, drawMargin);
    private v_draw(diff, drawMargin);
    /**
     * The non-draw version of "W" function.
     * "W" calculates a variation of a standard deviation.
     */
    private w_win(diff, drawMargin);
    /** The draw version of "W" function. */
    private w_draw(diff, drawMargin);
    /**
     * Validates a ratingGroups argument. It should contain more than
     * 2 groups and all groups must not be empty.
     */
    private validateRatingGroups(ratingGroups);
    private validate_weights(ratingGroups, weights?, keys?);
    private buildRatingLayer(ratingVars, flattenRatings);
    private buildPerfLayer(ratingVars, perfVars);
    private buildTeamPerfLayer(teamPerfVars, perfVars, teamSizes, flattenWeights);
    private buildTeamDiffLayer(teamPerfVars, teamDiffVars);
    private buildTruncLayer(teamDiffVars, sortedRanks, sortedRatingGroups);
    /**
     * Sends messages within every nodes of the factor graph
     * until the result is reliable.
     */
    private runSchedule(ratingVars, flattenRatings, perfVars, teamPerfVars, teamSizes, flattenWeights, teamDiffVars, sortedRanks, sortedRatingGroups, minDelta?);
}
/**
 * A shortcut to rate just 2 players in a head-to-head match
 */
export declare function rate_1vs1(rating1: Rating, rating2: Rating, drawn?: boolean, minDelta?: number, env?: TrueSkill): [Rating, Rating];
/**
 * A shortcut to calculate the match quality between 2 players in
 * a head-to-head match
 */
export declare function quality_1vs1(rating1: Rating, rating2: Rating, env?: TrueSkill): number;
/**
 * Gets the `TrueSkill` object which is the global environment.
 */
export declare function global_env(): TrueSkill;
/**
 * Setup the global environment defaults
 */
export declare function setup(mu?: number | null, sigma?: number | null, beta?: number | null, tau?: number | null, drawProbability?: number | null, env?: TrueSkill): TrueSkill;
/**
 * A proxy function for `TrueSkill.rate` of the global environment.
 */
export declare function rate(ratingGroups: Rating[][] | any[], ranks?: any[] | null, weights?: any[] | null, minDelta?: number): Rating[][];
export declare function winProbability(a: Rating[], b: Rating[]): number;
/**
 * A proxy function for `TrueSkill.quality` of the global
 * environment.
 */
export declare function quality(ratingGroups: Rating[][] | any[], weights?: number[][]): number;
/**
 * A proxy function for TrueSkill.expose of the global environment.
 */
export declare function expose(rating: Rating): number;
