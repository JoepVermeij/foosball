"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var uuid_1 = require("uuid");
var mathematics_1 = require("./mathematics");
var Variable = /** @class */ (function (_super) {
    __extends(Variable, _super);
    function Variable() {
        var _this = _super.call(this) || this;
        _this.messages = {};
        return _this;
    }
    Variable.prototype.setVal = function (val) {
        var delta = this.delta(val);
        this.pi = val.pi;
        this.tau = val.tau;
        return delta;
    };
    Variable.prototype.delta = function (other) {
        var piDelta = Math.abs(this.pi - other.pi);
        if (piDelta === Infinity) {
            return 0;
        }
        return Math.max(Math.abs(this.tau - other.tau), Math.sqrt(piDelta));
    };
    Variable.prototype.updateMessage = function (factor, pi, tau, message) {
        if (pi === void 0) { pi = 0; }
        if (tau === void 0) { tau = 0; }
        var newMessage = message ? message : new mathematics_1.Gaussian(null, null, pi, tau);
        var str = factor.toString();
        var oldMessage = this.messages[str];
        this.messages[str] = newMessage;
        return this.setVal(this.div(oldMessage).mul(newMessage));
    };
    Variable.prototype.updateValue = function (factor, pi, tau, value) {
        if (pi === void 0) { pi = 0; }
        if (tau === void 0) { tau = 0; }
        if (!value) {
            value = new mathematics_1.Gaussian(null, null, pi, tau);
        }
        var oldMessage = this.messages[factor.toString()];
        this.messages[factor.toString()] = value.mul(oldMessage).div(this);
        return this.setVal(value);
    };
    Variable.prototype.toString = function () {
        var count = Object.keys(this.messages).length;
        var s = count === 1 ? '' : 's';
        var val = _super.prototype.toString.call(this);
        return "<Variable " + val + " with " + count + " connection" + s + ">";
    };
    return Variable;
}(mathematics_1.Gaussian));
exports.Variable = Variable;
var Factor = /** @class */ (function () {
    function Factor(vars) {
        this.vars = vars;
        this.uuid = uuid_1.v1();
        var k = this.toString();
        vars.forEach(function (v) { return v.messages[k] = new mathematics_1.Gaussian(); });
    }
    Factor.prototype.down = function () {
        return 0;
    };
    Factor.prototype.up = function () {
        return 0;
    };
    Object.defineProperty(Factor.prototype, "v", {
        get: function () {
            if (this.vars.length !== 1) {
                throw new Error('Too long');
            }
            return this.vars[0];
        },
        enumerable: true,
        configurable: true
    });
    Factor.prototype.toString = function () {
        var s = this.vars.length === 1 ? '' : 's';
        return "<Factor with " + this.vars.length + " connection" + s + " " + this.uuid + ">";
    };
    return Factor;
}());
exports.Factor = Factor;
var PriorFactor = /** @class */ (function (_super) {
    __extends(PriorFactor, _super);
    function PriorFactor(v, val, dynamic) {
        if (dynamic === void 0) { dynamic = 0; }
        var _this = _super.call(this, [v]) || this;
        _this.val = val;
        _this.dynamic = dynamic;
        return _this;
    }
    PriorFactor.prototype.down = function () {
        var sigma = Math.sqrt(Math.pow(this.val.sigma, 2) + Math.pow(this.dynamic, 2));
        var value = new mathematics_1.Gaussian(this.val.mu, sigma);
        return this.v.updateValue(this, undefined, undefined, value);
    };
    return PriorFactor;
}(Factor));
exports.PriorFactor = PriorFactor;
var LikelihoodFactor = /** @class */ (function (_super) {
    __extends(LikelihoodFactor, _super);
    function LikelihoodFactor(mean, value, variance) {
        var _this = _super.call(this, [mean, value]) || this;
        _this.mean = mean;
        _this.value = value;
        _this.variance = variance;
        return _this;
    }
    LikelihoodFactor.prototype.calc_a = function (v) {
        return 1.0 / (1.0 + this.variance * v.pi);
    };
    LikelihoodFactor.prototype.down = function () {
        var msg = this.mean.div(this.mean.messages[this.toString()]);
        var a = this.calc_a(msg);
        return this.value.updateMessage(this, a * msg.pi, a * msg.tau);
    };
    LikelihoodFactor.prototype.up = function () {
        var msg = this.value.div(this.value.messages[this.toString()]);
        var a = this.calc_a(msg);
        return this.mean.updateMessage(this, a * msg.pi, a * msg.tau);
    };
    return LikelihoodFactor;
}(Factor));
exports.LikelihoodFactor = LikelihoodFactor;
var SumFactor = /** @class */ (function (_super) {
    __extends(SumFactor, _super);
    function SumFactor(sum, terms, coeffs) {
        var _this = _super.call(this, [sum].concat(terms)) || this;
        _this.sum = sum;
        _this.terms = terms;
        _this.coeffs = coeffs;
        return _this;
    }
    SumFactor.prototype.down = function () {
        var k = this.toString();
        var msgs = this.terms.map(function (v) { return v.messages[k]; });
        return this.update(this.sum, this.terms, msgs, this.coeffs);
    };
    SumFactor.prototype.up = function (index) {
        if (index === void 0) { index = 0; }
        var coeff = this.coeffs[index];
        var x = 0;
        var coeffs = this.coeffs.map(function (c) {
            var p = -c / coeff;
            if (x === index) {
                p = 1.0 / coeff;
            }
            p = (_.isFinite(p)) ? p : 0;
            if (coeff === 0) {
                p = 0;
            }
            x = x + 1;
            return p;
        });
        var vals = _.clone(this.terms);
        vals[index] = this.sum;
        var k = this.toString();
        var msgs = vals.map(function (v) { return v.messages[k]; });
        return this.update(this.terms[index], vals, msgs, coeffs);
    };
    SumFactor.prototype.update = function (v, vals, msgs, coeffs) {
        var piInv = 0;
        var mu = 0;
        for (var i = 0; i < vals.length; i++) {
            var val = vals[i];
            var msg = msgs[i];
            var coeff = coeffs[i];
            var div = val.div(msg);
            mu += coeff * div.mu;
            if (!_.isFinite(piInv)) {
                continue;
            }
            piInv += Math.pow(coeff, 2) / div.pi;
        }
        var pi = 1.0 / piInv;
        var tau = pi * mu;
        return v.updateMessage(this, pi, tau);
    };
    return SumFactor;
}(Factor));
exports.SumFactor = SumFactor;
var TruncateFactor = /** @class */ (function (_super) {
    __extends(TruncateFactor, _super);
    function TruncateFactor(v, vFunc, wFunc, drawMargin) {
        var _this = _super.call(this, [v]) || this;
        _this.vFunc = vFunc;
        _this.wFunc = wFunc;
        _this.drawMargin = drawMargin;
        return _this;
    }
    TruncateFactor.prototype.up = function () {
        var val = this.v;
        var msg = this.v.messages[this.toString()];
        var div = val.div(msg);
        var sqrtPi = Math.sqrt(div.pi);
        var v = this.vFunc(div.tau / sqrtPi, this.drawMargin * sqrtPi);
        var w = this.wFunc(div.tau / sqrtPi, this.drawMargin * sqrtPi);
        var denom = (1.0 - w);
        var pi = div.pi / denom;
        var tau = (div.tau + sqrtPi * v) / denom;
        return val.updateValue(this, pi, tau);
    };
    return TruncateFactor;
}(Factor));
exports.TruncateFactor = TruncateFactor;
//# sourceMappingURL=factorgraph.js.map