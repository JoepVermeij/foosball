"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A model for the normal distribution.
 */
var Gaussian = /** @class */ (function () {
    function Gaussian(mu, sigma, 
        /** Precision, the inverse of the variance. */
        pi, 
        /** Precision adjusted mean, the precision multiplied by the mean. */
        tau) {
        if (mu === void 0) { mu = null; }
        if (sigma === void 0) { sigma = null; }
        if (pi === void 0) { pi = 0; }
        if (tau === void 0) { tau = 0; }
        this.pi = pi;
        this.tau = tau;
        // console.log('GAUSSIAN', mu, sigma, pi, tau)
        if (mu !== null) {
            if (sigma === null) {
                throw new TypeError('sigma argument is needed');
            }
            else if (sigma === 0) {
                throw new Error('sigma**2 should be greater than 0');
            }
            pi = Math.pow(sigma, -2);
            tau = pi * mu;
        }
        this.pi = pi;
        this.tau = tau;
    }
    Object.defineProperty(Gaussian.prototype, "mu", {
        /** A property which returns the mean. */
        get: function () {
            return this.pi && this.tau / this.pi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Gaussian.prototype, "sigma", {
        get: function () {
            if (this.pi) {
                return Math.sqrt(1 / this.pi);
            }
            return Infinity;
        },
        enumerable: true,
        configurable: true
    });
    Gaussian.prototype.mul = function (other) {
        var pi = this.pi + other.pi;
        var tau = this.tau + other.tau;
        return new Gaussian(null, null, pi, tau);
    };
    Gaussian.prototype.div = function (other) {
        var pi = this.pi - other.pi;
        var tau = this.tau - other.tau;
        return new Gaussian(null, null, pi, tau);
    };
    Gaussian.prototype.toString = function () {
        var mu = this.mu.toPrecision(3);
        var sigma = this.sigma.toPrecision(3);
        return "N(mu=" + mu + ", sigma=" + sigma + ")";
    };
    return Gaussian;
}());
exports.Gaussian = Gaussian;
//# sourceMappingURL=mathematics.js.map